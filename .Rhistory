kable() %>%
kable_styling(c("striped", "condensed", "hover"))
COVID.Gender
COVID.Gender <- COVID.Age[,c(1,3,2)]
COVID.Gender
COVID.Gender %>%
kable() %>%
kable_styling(c("striped", "condensed", "hover")) %>%
column_spec(3, bold = T, color = "#DC4015")
COVID.Gender <- read_csv("https://phl.carto.com/api/v2/sql?q=SELECT+*+FROM+covid_cases_by_sex&filename=covid_cases_by_Gender&format=csv&skipfields=cartodb_id")
# COVID Gender Breakdown ----------------------------------------------------------
COVID.Gender <- COVID.Gender[,3:5]
colnames(COVID.Gender) <- c("Gender", "Count", "TimeStamp")
COVID.Gender <- COVID.Gender %>%
# filter(Gender != "UNKNOWN") %>% # Removed only for simplicity
select(Gender, Count) %>%
mutate(Outcome = "Positive")
COVID.GenderDeath <- COVID.DeathAge %>%
group_by(Gender) %>%
summarise(Count = sum(Count)) %>%
mutate(Outcome = "Died")
COVID.Gender <- rbind(COVID.Gender, COVID.GenderDeath)
COVID.Gender <- COVID.Age[,c(1,3,2)] # Reorder to display properly
COVID.Gender <- read_csv("https://phl.carto.com/api/v2/sql?q=SELECT+*+FROM+covid_cases_by_sex&filename=covid_cases_by_Gender&format=csv&skipfields=cartodb_id")
# COVID Gender Breakdown ----------------------------------------------------------
COVID.Gender <- COVID.Gender[,3:5]
colnames(COVID.Gender) <- c("Gender", "Count", "TimeStamp")
COVID.Gender <- COVID.Gender %>%
# filter(Gender != "UNKNOWN") %>% # Removed only for simplicity
select(Gender, Count) %>%
mutate(Outcome = "Positive")
COVID.GenderDeath <- COVID.DeathAge %>%
group_by(Gender) %>%
summarise(Count = sum(Count)) %>%
mutate(Outcome = "Died")
COVID.Gender <- rbind(COVID.Gender, COVID.GenderDeath)
COVID.Gender <- COVID.Gender[,c(1,3,2)] # Reorder to display properly
COVID.Gender
COVID.Gender %>%
kable() %>%
kable_styling(c("striped", "condensed", "hover")) %>%
column_spec(3, bold = T, color = "#DC4015")
COVID.Gender$Gender[4]/COVID.Gender$Gender[1]
COVID.Gender$Count[4]/COVID.Gender$Count[1]
percent(COVID.Gender$Count[4]/COVID.Gender$Count[1])
percent(COVID.Gender$Count[4]/COVID.Gender$Count[1], 2)
percent(COVID.Gender$Count[4]/COVID.Gender$Count[1], 5)
percent(COVID.Gender$Count[4]/COVID.Gender$Count[1], .01)
COVID.Gender %>%
arrange(Gender) %>%
kable() %>%
kable_styling(c("striped", "condensed", "hover")) %>%
column_spec(3, bold = T, color = "#DC4015")
# Load all applicable libraries
library(flexdashboard) # For construction of dashboard format
library(readr) # For faster CSV read using read_csv (instead of read.csv)
library(tidyverse) # For access to dplyr and other libraries
library(scales)
library(highcharter) # Graphing library of choice
library(leaflet) # Mapping library of choice
library(tigris) # Support for Zip Code cacheing
library(kableExtra) # Graphic table librarr
source("Init.R") # Most used dataframes come from this initial r-script
COVID.Gender %>%
arrange(Gender) %>%
kable() %>%
kable_styling(c("striped", "condensed", "hover")) %>%
column_spec(3, bold = T, color = "#DC4015") %>%
footnote(general = "Counts are based on all-time totals. Gender identification is resprentative of recorded data and not a depiction of pronoun bias.")
# Load all applicable libraries
library(flexdashboard) # For construction of dashboard format
library(readr) # For faster CSV read using read_csv (instead of read.csv)
library(tidyverse) # For access to dplyr and other libraries
library(scales)
library(highcharter) # Graphing library of choice
library(leaflet) # Mapping library of choice
library(tigris) # Support for Zip Code cacheing
library(kableExtra) # Graphic table librarr
source("Init.R") # Most used dataframes come from this initial r-script
COVID.Outcome
COVID.Date
library(zoo)
library(slider)
install.packages("slider")
install.packages("slider")
install.packages("slider")
library(flexdashboard) # For construction of dashboard format
library(readr) # For faster CSV read using read_csv (instead of read.csv)
library(tidyverse) # For access to dplyr and other libraries
library(scales)
library(highcharter) # Graphing library of choice
library(leaflet) # Mapping library of choice
library(tigris) # Support for Zip Code cacheing
library(kableExtra) # Graphic table librarr
library(zoo) # rolling window averages
library(slider) # rolling average windows
COVID.Date %>%
group_by(Outcome) %>%
summarise(
RollWin = slide_period(.i = ResultDate, .x = Count, .period = "week")
)
COVID.Date %>%
group_by(Outcome) %>%
summarise(
RollWin = slide_period(.i = ResultDate, .x = Count, .period = "week", .f = mean)
)
COVID.Date %>%
group_by(Outcome) %>%
summarise(
RollWin = slide_period(.i = ResultDate, .x = Count, .period = "week", .f = mean)
)
COVID.Date
?arrange
COVID.Date %>%
arrange(ResultDate) %>%
group_by(Outcome) %>%
summarise(
RollWin = slide_period(.i = ResultDate, .x = Count, .period = "week", .f = mean)
)
COVID.Date %>%
arrange(ResultDate) %>%
group_by(Outcome) %>%
mutate(
RollWin = slide_period(.i = ResultDate, .x = Count, .period = "week", .f = mean)
)
COVID.Date %>%
arrange(ResultDate) %>%
group_by(Outcome) %>%
summarise(
RollWin = slide_period(.i = ResultDate, .x = Count, .period = "week", .f = mean, .complete = F)
)
COVID.Date %>%
arrange(ResultDate) %>%
group_by(Outcome) %>%
summarise(
RollWin = slide_period(.i = ResultDate, .x = Count, .period = "week", .f = mean, .complete = T)
)
?rollapply
COVID.Date %>%
arrange(ResultDate) %>%
group_by(Outcome) %>%
summarise(
# RollWin = slide_period(.i = ResultDate, .x = Count, .period = "week", .f = mean, .complete = T)
RollWin = rollapply(FUN = mean, width = 7)
)
COVID.Date %>%
arrange(ResultDate) %>%
group_by(Outcome) %>%
summarise(
# RollWin = slide_period(.i = ResultDate, .x = Count, .period = "week", .f = mean, .complete = T)
RollWin = rollapply(Count, FUN = mean, width = 7)
)
COVID.Date %>%
arrange(ResultDate) %>%
group_by(Outcome) %>%
summarise(
RollWin = slide_period(.i = ResultDate, .x = Count, .period = "week", .f = mean, .complete = T)
# RollWin = rollapply(Count, FUN = mean, width = 7)
)
COVID.Date %>%
arrange(ResultDate) %>%
group_by(Outcome) %>%
mutate(
RollWin = slide_period(.i = ResultDate, .x = Count, .period = "week", .f = mean, .complete = T)
# RollWin = rollapply(Count, FUN = mean, width = 7)
)
COVID.Date %>%
arrange(ResultDate) %>%
group_by(Outcome) %>%
mutate(
RollWin = slide_period(.i = ResultDate, .x = Count, .period = "week", .f = mean, .complete = F)
# RollWin = rollapply(Count, FUN = mean, width = 7)
)
COVID.Date %>%
arrange(ResultDate) %>%
group_by(Outcome) %>%
mutate(
RollWin = slide_period(.i = ResultDate, .x = ~Count, .period = "week", .f = mean, .complete = F)
# RollWin = rollapply(Count, FUN = mean, width = 7)
)
COVID.Date %>%
arrange(ResultDate) %>%
group_by(Outcome) %>%
mutate(
RollWin = slide_period(.i = ResultDate, .x = ~Count, .period = "week", .f = mean, .complete = F)
# RollWin = rollapply(Count, FUN = mean, width = 7)
)
library(flexdashboard) # For construction of dashboard format
library(readr) # For faster CSV read using read_csv (instead of read.csv)
library(tidyverse) # For access to dplyr and other libraries
library(scales)
library(highcharter) # Graphing library of choice
library(leaflet) # Mapping library of choice
library(tigris) # Support for Zip Code cacheing
library(kableExtra) # Graphic table library
# COVID Rolling Avg ------------------------------------------------------------
COVID.DateC
unique(COVID.DateC)
unique(COVID.DateC$Outcome)
# COVID Rolling Avg ------------------------------------------------------------
COVID.DateC %>%
group_by(Outcome) %>%
mutate(
RollWindow = zoo::rollapply(Count, width = 7, FUN = mean, fill = NA)
)
# COVID Rolling Avg ------------------------------------------------------------
COVID.DateC %>%
arrange(ResultDate) %>%
group_by(Outcome) %>%
mutate(
RollWindow = zoo::rollapply(Count, width = 7, FUN = mean, fill = NA)
)
# COVID Rolling Avg ------------------------------------------------------------
COVID.DateC %>%
arrange(ResultDate) %>%
group_by(Outcome) %>%
mutate(
RollWindow = zoo::rollapply(Count, width = 7, FUN = mean, fill = NA)
) %>%
View()
?slider::slide_period
# COVID Rolling Avg ------------------------------------------------------------
COVID.DateC %>%
arrange(ResultDate) %>%
group_by(Outcome) %>%
mutate(
# RollWindow = zoo::rollapply(Count, width = 7, FUN = mean, fill = NA)
RollWindow = slider::slide_period(.x = Count, .i = ResultDate, .f = mean, .period = "week")
) %>%
View()
COVID.DateC %>%
arrange(ResultDate) %>%
group_by(Outcome) %>%
mutate(
# RollWindow = zoo::rollapply(Count, width = 7, FUN = mean, fill = NA)
RollWindow = slider::slide_period(.x = Count, .i = ResultDate, .f = mean, .period = "week")
)
# COVID Rolling Avg ------------------------------------------------------------
COVID.DateC %>%
arrange(ResultDate) %>%
group_by(Outcome) %>%
mutate(
# RollWindow = zoo::rollapply(Count, width = 7, FUN = mean, fill = NA)
RollWindow = slider::slide_period(.x = Count, .i = ResultDate, .f = mean(., na.rm = T), .period = "week")
) %>%
View()
View(COVID.DateC)
?seq
min(COVID.DateC$ResultDate)
min(COVID.DateC$ResultDate, na.rm = T)
COVID.DateC
COVID.DateC[is.na(COVID.DateC$ResultDate)]
COVID.DateC$ResultDate[is.na(COVID.DateC$ResultDate)]
COVID.DateC %>%
drop_na() %>%
arrange(ResultDate) %>%
group_by(Outcome) %>%
mutate(
# RollWindow = zoo::rollapply(Count, width = 7, FUN = mean, fill = NA)
RollWindow = slider::slide_period(.x = Count, .i = ResultDate, .f = mean, .period = "week")
) %>%
View()
COVID.DateC %>%
drop_na() %>%
arrange(ResultDate) %>%
group_by(Outcome) %>%
mutate(
# RollWindow = zoo::rollapply(Count, width = 7, FUN = mean, fill = NA)
RollWindow = slider::slide_period(.x = Count, .i = ResultDate, .f = mean, .period = "week")
)
# COVID Rolling Avg ------------------------------------------------------------
alldates <- data.frame(date = seq(min(COVID.DateC$ResultDate, na.rm = T), max(COVID.DateC$ResultDate, na.rm = T)))
# COVID Rolling Avg ------------------------------------------------------------
alldates <- data.frame(date = seq(min(COVID.DateC$ResultDate, na.rm = T), max(COVID.DateC$ResultDate, na.rm = T), 1))
alldates
COVID.DateC
# COVID Rolling Avg ------------------------------------------------------------
alldates <- data.frame(ResultDate = seq(min(COVID.DateC$ResultDate, na.rm = T), max(COVID.DateC$ResultDate, na.rm = T), 1))
COVID.DateC %>%
drop_na() %>%
full_join(alldates, by = "ResultDate") %>%
arrange(ResultDate)
COVID.DateC %>%
drop_na() %>%
full_join(alldates, by = "ResultDate") %>%
arrange(ResultDate) %>% View()
COVID.DateC %>%
drop_na() %>%
full_join(alldates, by = "ResultDate") %>%
arrange(ResultDate) %>%
group_by(Outcome) %>%
mutate(
# RollWindow = zoo::rollapply(Count, width = 7, FUN = mean, fill = NA)
RollWindow = slider::slide_period(.x = Count, .i = ResultDate, .f = mean, .period = "week")
)
COVID.DateC %>%
drop_na() %>%
full_join(alldates, by = "ResultDate") %>%
replace_na(0) %>%
arrange(ResultDate) %>%
group_by(Outcome)
COVID.DateC %>%
drop_na() %>%
full_join(alldates, by = "ResultDate") %>%
# replace_na(0) %>%
arrange(ResultDate) %>%
group_by(Outcome) %>%
mutate(
RollWindow = zoo::rollapply(Count, width = 7, FUN = mean, fill = NA)
# RollWindow = slider::slide_period(.x = Count, .i = ResultDate, .f = mean, .period = "week")
) %>%
View()
COVID.DateC %>%
drop_na() %>%
full_join(alldates, by = "ResultDate") %>%
# replace_na(0) %>%
arrange(ResultDate) %>%
group_by(Outcome) %>%
mutate(
RollWindow = zoo::rollapplyr(Count, width = 7, FUN = mean, fill = NA)
# RollWindow = slider::slide_period(.x = Count, .i = ResultDate, .f = mean, .period = "week")
) %>%
View()
unique(COVID.DateC$Outcome)
outcomes <- data.frame(Outcome = c("Positive", "Negative", "Died"))
full_join(alldates, outcomes)
alldates
outcomes
COVID.DateC %>%
drop_na() %>%
full_join(alldates, by = "ResultDate") %>%
# replace_na(0) %>%
arrange(ResultDate) %>%
group_by(Outcome) %>%
mutate(
RollWindow = zoo::rollapplyr(Count, width = 7, FUN = mean)
# RollWindow = slider::slide_period(.x = Count, .i = ResultDate, .f = mean, .period = "week")
)
COVID.DateC %>%
drop_na() %>%
full_join(alldates, by = "ResultDate") %>%
# replace_na(0) %>%
arrange(ResultDate) %>%
group_by(Outcome) %>%
mutate(
RollWindow = zoo::rollapplyr(Count, width = 7, FUN = mean, fill = NA)
# RollWindow = slider::slide_period(.x = Count, .i = ResultDate, .f = mean, .period = "week")
)
COVID.DateC %>%
drop_na() %>%
full_join(alldates, by = "ResultDate") %>%
# replace_na(0) %>%
arrange(ResultDate) %>%
group_by(Outcome) %>%
mutate(
RollWindow = zoo::rollapplyr(Count, width = 7, FUN = mean, fill = NA)
# RollWindow = slider::slide_period(.x = Count, .i = ResultDate, .f = mean, .period = "week")
) %>%
View()
(11+13+20+47+49+30+84)/7
# COVID Rolling Avg ------------------------------------------------------------
alldates <- data.frame(ResultDate = seq(min(COVID.DateC$ResultDate, na.rm = T), max(COVID.DateC$ResultDate, na.rm = T), 1),
Outcome = rep("Positive"))
roll.wk <- COVID.DateC %>%
drop_na() %>%
full_join(alldates, by = "ResultDate") %>%
# replace_na(0) %>%
arrange(ResultDate) %>%
group_by(Outcome) %>%
mutate(
RollWindow = zoo::rollapplyr(Count, width = 7, FUN = mean, fill = NA)
# RollWindow = slider::slide_period(.x = Count, .i = ResultDate, .f = mean, .period = "week")
)
COVID.DateC
# COVID Rolling Avg ------------------------------------------------------------
alldates <- data.frame(ResultDate = seq(min(COVID.DateC$ResultDate, na.rm = T), max(COVID.DateC$ResultDate, na.rm = T), 1),
Outcome = rep("Positive"))
roll.wk <- COVID.DateC %>%
drop_na() %>%
full_join(alldates, by = "ResultDate") %>%
# replace_na(0) %>%
arrange(ResultDate) %>%
group_by(Outcome) %>%
mutate(
RollWindow = zoo::rollapplyr(Count, width = 7, FUN = mean, fill = NA)
)
COVID.DateC %>%
drop_na() %>%
full_join(alldates, by = "ResultDate")
# COVID Rolling Avg ------------------------------------------------------------
alldates <- data.frame(ResultDate = seq(min(COVID.DateC$ResultDate, na.rm = T), max(COVID.DateC$ResultDate, na.rm = T), 1))
roll.wk <- COVID.DateC %>%
drop_na() %>%
full_join(alldates, by = "ResultDate") %>%
# replace_na(0) %>%
arrange(ResultDate) %>%
group_by(Outcome) %>%
mutate(
RollWindow = zoo::rollapplyr(Count, width = 7, FUN = mean, fill = NA)
)
roll.wk %>%
arrange(ResultDate) %>%
hchart("area", hcaes(x = ResultDate, y = Count, group = Outcome)) %>%
hc_add_theme(hc_theme_db()) %>%
hc_colors(colors = c("#F1431C")) %>%
hc_chart(zoomType = "xy") %>%
hc_title(text = "COVID-19 Death Counts by Date") %>%
hc_exporting(enabled = TRUE, filename = "COVID19_Incidence_Plot") %>%
hc_yAxis(title = list(text = "Count (n)", style = list(fontSize = "16px", color = "white")),
labels = list(style = list(fontSize = "12px", color = "white"))) %>%
hc_xAxis(title = list(text = "Date (Death Count Per Day)", style = list(fontSize = "16px", color = "white")),
labels = list(style = list(fontSize = "12px", color = "white"))) %>%
hc_credits(enabled = TRUE, text = "Source: https://www.opendataphilly.org/dataset/covid-cases")
unique(roll.wk$Outcome)
roll.wk %>%
arrange(ResultDate) %>%
drop_na() %>%
hchart("area", hcaes(x = ResultDate, y = Count, group = Outcome)) %>%
hc_add_theme(hc_theme_db()) %>%
hc_colors(colors = c("#F1431C")) %>%
hc_chart(zoomType = "xy") %>%
hc_title(text = "COVID-19 Death Counts by Date") %>%
hc_exporting(enabled = TRUE, filename = "COVID19_Incidence_Plot") %>%
hc_yAxis(title = list(text = "Count (n)", style = list(fontSize = "16px", color = "white")),
labels = list(style = list(fontSize = "12px", color = "white"))) %>%
hc_xAxis(title = list(text = "Date (Death Count Per Day)", style = list(fontSize = "16px", color = "white")),
labels = list(style = list(fontSize = "12px", color = "white"))) %>%
hc_credits(enabled = TRUE, text = "Source: https://www.opendataphilly.org/dataset/covid-cases")
roll.wk %>%
arrange(ResultDate) %>%
drop_na() %>%
hchart("area", hcaes(x = ResultDate, y = Count, group = Outcome)) %>%
hc_add_theme(hc_theme_db()) %>%
hc_colors(colors = c("#89DC6B", "#F1431C", "#E7B53C")) %>%
hc_chart(zoomType = "xy") %>%
hc_title(text = "COVID-19 Death Counts by Date") %>%
hc_exporting(enabled = TRUE, filename = "COVID19_Incidence_Plot") %>%
hc_yAxis(title = list(text = "Count (n)", style = list(fontSize = "16px", color = "white")),
labels = list(style = list(fontSize = "12px", color = "white"))) %>%
hc_xAxis(title = list(text = "Date (Death Count Per Day)", style = list(fontSize = "16px", color = "white")),
labels = list(style = list(fontSize = "12px", color = "white"))) %>%
hc_credits(enabled = TRUE, text = "Source: https://www.opendataphilly.org/dataset/covid-cases")
roll.wk %>%
arrange(ResultDate) %>%
drop_na() %>%
hchart("line", hcaes(x = ResultDate, y = Count, group = Outcome)) %>%
hc_add_theme(hc_theme_db()) %>%
hc_colors(colors = c("#89DC6B", "#F1431C", "#E7B53C")) %>%
hc_chart(zoomType = "xy") %>%
hc_title(text = "COVID-19 Death Counts by Date") %>%
hc_exporting(enabled = TRUE, filename = "COVID19_Incidence_Plot") %>%
hc_yAxis(title = list(text = "Count (n)", style = list(fontSize = "16px", color = "white")),
labels = list(style = list(fontSize = "12px", color = "white"))) %>%
hc_xAxis(title = list(text = "Date (Death Count Per Day)", style = list(fontSize = "16px", color = "white")),
labels = list(style = list(fontSize = "12px", color = "white"))) %>%
hc_credits(enabled = TRUE, text = "Source: https://www.opendataphilly.org/dataset/covid-cases")
roll.wk %>%
arrange(ResultDate) %>%
drop_na() %>%
hchart("scatter", hcaes(x = ResultDate, y = Count, group = Outcome)) %>%
hc_add_theme(hc_theme_db()) %>%
hc_colors(colors = c("#89DC6B", "#F1431C", "#E7B53C")) %>%
hc_chart(zoomType = "xy") %>%
hc_title(text = "COVID-19 7-Day Rolling Average") %>%
hc_exporting(enabled = TRUE, filename = "COVID19_Rolling_Avg_Plot") %>%
hc_yAxis(title = list(text = "Count (n)", style = list(fontSize = "16px", color = "white")),
labels = list(style = list(fontSize = "12px", color = "white"))) %>%
hc_xAxis(title = list(text = "Date (Avg. of Preceding 7 Days)", style = list(fontSize = "16px", color = "white")),
labels = list(style = list(fontSize = "12px", color = "white"))) %>%
hc_credits(enabled = TRUE, text = "Source: https://www.opendataphilly.org/dataset/covid-cases")
roll.wk %>%
arrange(ResultDate) %>%
drop_na() %>%
hchart("area", hcaes(x = ResultDate, y = Count, group = Outcome)) %>%
hc_add_theme(hc_theme_db()) %>%
hc_colors(colors = c("#F1431C", "#89DC6B", "#E7B53C")) %>%
hc_chart(zoomType = "xy") %>%
hc_title(text = "COVID-19 7-Day Rolling Average") %>%
hc_exporting(enabled = TRUE, filename = "COVID19_Rolling_Avg_Plot") %>%
hc_yAxis(title = list(text = "Count (n)", style = list(fontSize = "16px", color = "white")),
labels = list(style = list(fontSize = "12px", color = "white"))) %>%
hc_xAxis(title = list(text = "Date (Avg. of Preceding 7 Days)", style = list(fontSize = "16px", color = "white")),
labels = list(style = list(fontSize = "12px", color = "white"))) %>%
hc_credits(enabled = TRUE, text = "Source: https://www.opendataphilly.org/dataset/covid-cases")
View(roll.wk)
roll.wk %>% filter(Outcome == "Negative") %>% View()
roll.wk
roll.wk %>%
arrange(ResultDate) %>%
drop_na() %>%
hchart("area", hcaes(x = ResultDate, y = RollWindow, group = Outcome)) %>%
hc_add_theme(hc_theme_db()) %>%
hc_colors(colors = c("#F1431C", "#89DC6B", "#E7B53C")) %>%
hc_chart(zoomType = "xy") %>%
hc_title(text = "COVID-19 7-Day Rolling Average") %>%
hc_exporting(enabled = TRUE, filename = "COVID19_Rolling_Avg_Plot") %>%
hc_yAxis(title = list(text = "Count (n)", style = list(fontSize = "16px", color = "white")),
labels = list(style = list(fontSize = "12px", color = "white"))) %>%
hc_xAxis(title = list(text = "Date (Avg. of Preceding 7 Days)", style = list(fontSize = "16px", color = "white")),
labels = list(style = list(fontSize = "12px", color = "white"))) %>%
hc_credits(enabled = TRUE, text = "Source: https://www.opendataphilly.org/dataset/covid-cases")
# COVID Rolling Avg ------------------------------------------------------------
alldates <- data.frame(ResultDate = seq(min(COVID.DateC$ResultDate, na.rm = T), max(COVID.DateC$ResultDate, na.rm = T), 1))
roll.wk <- COVID.DateC %>%
drop_na() %>%
full_join(alldates, by = "ResultDate") %>%
# replace_na(0) %>%
arrange(ResultDate) %>%
group_by(Outcome) %>%
mutate(
RollWindow = round(zoo::rollapplyr(Count, width = 7, FUN = mean, fill = NA),1)
)
